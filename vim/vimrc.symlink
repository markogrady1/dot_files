""" set the runtime path to include Vundle and initialize
" git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
" open .vimrc and type :PluginInstall

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
""" to install these plugins simply run :PluginInstall
""" alternatively, pass a path where Vundle should install plugins
"""call vundle#begin('~/some/path/here')
""
" Vundle package manager
Plugin 'VundleVim/Vundle.vim'
" Git wrapper vim-fugitive
" Plugin 'vim-fugitive'
" File finder command-t
Plugin 'scrooloose/nerdtree'
" File finder command-t
Plugin 'wincent/command-t'
" parser for a condensed HTML format sparkup
Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
" distraction free vim goyo.vim
Plugin 'junegunn/goyo.vim'
" quoting/parenthesizing made simple with vim-surround
Plugin 'tpope/vim-surround'
" Vastly improved Javascript indentation and syntax support in Vim.
Plugin 'pangloss/vim-javascript'
" Javascript syntax highlighter with some nice colors
Plugin 'jelera/vim-javascript-syntax'
" Syntastic for sytax typo highlighting
Plugin 'vim-syntastic/syntastic'
" handy plugin to open NerdTree in all tabs rather than on the one.
Plugin 'jistr/vim-nerdtree-tabs'
" plugin to view git changes and modifications
Plugin 'airblade/vim-gitgutter'
" reveals character representation in decimal, octal, and hex
Plugin 'tpope/vim-characterize'
" comments out the visual block
Plugin 'tpope/vim-commentary'
" closed quotes
Plugin 'Raimondi/delimitMate'
" grep in vim
Plugin 'mhinz/vim-grepper'
" view git branch tree
Plugin 'junegunn/gv.vim'
" view git branch tree
Plugin 'markonm/traces.vim'

call vundle#end()            " required

" set runtimepath for ctrlp.vim
set runtimepath^=~/.vim/bundle/ctrlp.vim

"set status line so its visible
set statusline=2
set statusline+=%#DiffAdd#%{(mode()=='n')?'\ \ NORMAL\ ':''}
set statusline+=%#DiffChange#%{(mode()=='i')?'\ \ INSERT\ ':''}
set statusline+=%#DiffDelete#%{(mode()=='r')?'\ \ RPLACE\ ':''}
set statusline+=%#Cursor#%{(mode()=='v')?'\ \ VISUAL\ ':''}
set statusline+=\ %n\           " buffer number
set statusline+=%#Visual#       " colour
set statusline+=%{&paste?'\ PASTE\ ':''}
set statusline+=%{&spell?'\ SPELL\ ':''}
set statusline+=%#CursorIM#      " colour
set statusline+=%R               " readonly flag
set statusline+=%M               " modified [+] flag
set statusline+=%#Cursor#        " colour
set statusline+=%#CursorLine#    " colour
set statusline+=\ %t\            " short file name
set statusline+=%=               " right align
set statusline+=%#CursorLine#    " colour
set statusline+=\ %Y\            " file type
set statusline+=%#CursorIM#      " colour
set statusline+=\ %3l:%-2c\      " line + column
set statusline+=%#Cursor#        " colour
set statusline+=\ %3p%%\         " percentage
set statusline+=%4*\ %<%F%*      " path to file

set nocompatible

"save automaticly when run external command
set autowrite

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

set autoindent      " always set autoindenting on
set smartindent
"set expandtab
" all tab stuff to 4
set tabstop=4
set softtabstop=4
set shiftwidth=4
set cinoptions=>4
set expandtab  "otherwise source code looks differntly depending on viewer

set noswapfile

set nobackup        " do not keep a backup file, use versions instead
set viminfo='50,\"500
set history=150     " keep 50 lines of command line history
set ruler       " show the cursor position all the time
set showcmd     " display incomplete commands
set incsearch       " do incremental searching
set confirm     " ask instead of error message
set showmatch       "control if right bracket match, if not beep
set ruler
set rulerformat=set rulerformat=%-35(%4l,%02c\ %07P%)\ \ %f\ %< "show position of cursor
set clipboard=unnamed   "copy into clipboard yanked lines (choosen with y)
"automatic completition of commands
set wildchar=<Tab>
set wildmenu
set wildmode=longest:full,full

" Don't use Ex mode, use Q for formatting
map Q gq
map <F1> :buffers<CR>
map <F2> :w<CR>
map <F3> [I
map <F4> :bp<CR>
map <F5> :bn<CR>
map <F6> :!perl %<CR>
map <F7> :resize +10<CR>
map <F9> :!perl -c %<CR>
map <F12> :q!<CR>
imap <F1> <Esc>:buffers<CR>
imap <F2> <Esc>:w<CR>
imap <F3> <Esc>[I
imap <F4> <Esc>:bp<CR>
imap <F5> <Esc>:bn<CR>
imap <F6> <Esc>:!perl %<CR>
imap <F7> <Esc>:resize +10<CR>
imap <F9> <Esc>:!perl -c %<CR>
imap <F12> <Esc>:q!<CR>

" vim-commentary plugin settings
" set alias of 'ch' for commentary and set filetypes i use
map  ch ga

" set alias of 'cm' for commentary and set filetypes i use
map  cm gc

autocmd FileType perl setlocal commentstring=#\ %s
autocmd FileType sh setlocal commentstring=#\ %s
autocmd FileType javascript setlocal commentstring=//\ %s


" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
  hi Comment ctermfg=darkgreen
endif

" Only do this part when compiled with support for autocommands.
if has("autocmd")

" For all text files set 'textwidth' to 78 characters.
autocmd FileType text setlocal textwidth=78

" When editing a file, always jump to the last known cursor position.
" Don't do it when the position is invalid or when inside an event handler
" (happens when dropping a file on gvim).
autocmd BufReadPost *
  \ if line("'\"") > 0 && line("'\"") <= line("$") |
  \   exe "normal g`\"" |
  \ endif

endif " has("autocmd")
abbrev udu use Data::Dumper
" abbrev dump print Dumper(
abbrev pr print
abbrev ret return

highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/

highlight FuckingTabs ctermbg=red guibg=red
match FuckingTabs /\t\+/

set number
set nofoldenable

colorscheme delek
color dracula
set background=dark

set encoding=utf-8
set autoindent
syntax on
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab

"disable/enable visual alarms 'ding'
set visualbell

set laststatus=2
set linespace=2
set showmode

"set the color schemes for templates and bash
autocmd BufNewFile,BufRead *.template   set syntax=perl
"autocmd BufNewFile,BufRead *.t   set syntax=perl
"autocmd FileType *.sh colorscheme desert
"autocmd BufNewFile,BufRead *.sh  colorscheme desert
"autocmd BufNewFile,BufRead *.template  colorscheme slate

"use templates for Perl .pl and .pm files
au BufNewFile *.pm 0r ~/.vim/pm_header.temp
au BufNewFile *.pl 0r ~/.vim/pl_header.temp

"this will highlight each and every match during a word search
set hlsearch
set timeoutlen=1000 ttimeoutlen=0

"set the color of NerdTree dir/files
hi Directory guifg=#7ad7fc ctermfg=45
"set the color of the split line between files and directory(NerdTree)
highlight VertSplit ctermbg=45
highlight VertSplit ctermfg=45
set noeb vb t_vb=

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" MAP TOGGLE of NERDTree HIDE/SHOW
" To toggle of NERDTree display it is mapped to F7 - i.e (fn + F7)
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
map  <F7> :NERDTreeToggle<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" MAP TOGGLE of :NERDTreeTabsToggle HIDE/SHOW
" To toggle of NERDTree display it is mapped to F9 - i.e (fn + F9)
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
map  <F9> :NERDTreeTabsToggle<CR>
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" MAP the usage of CTRLP search tool
" To search with CTRLP it is mapped to F6 - i.e (fn + F6)
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
map  <F6> ::CtrlP<CR>
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" MAP THE ESCAPE TO DOUBLE J
" Instead of constantly reaching for the ESC key, we can hit jj
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
imap jj <Esc>   sd

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" FAT COMMA SHORTCUT
" map ctrl+l to create a fat comma surrounded with spaces
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
imap <c-l> <space>=><space>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" SEARCH HIGHLIGHTING
" map the delete key to turn off search highlighting
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nmap <silent> <BS> :nohlsearch<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" POPULAR PERL CODE SHORTCUTS
" set some abbreviations for popular perl code constructs
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
iab psh #!/usr/bin/env perl<CR><CR>use warnings;<CR>use strict;<CR>
iab bsh #!/bin/bash
iab udd use Data::Dumper;<CR>
iab pdd print Dumper
iab uddx use Data::Dump 'ddx';<CR>ddx;<LEFT>
iab udv use Dumpvalue;<CR>Dumpvalue->new->dumpValues();<ESC>hi
iab uds use Data::Show;<CR>show
iab ubm use Benchmark qw( cmpthese );<CR><CR>cmpthese -10, {<CR>};<ESC>O
iab usc use Smart::Comments;<CR>###
iab uts use Test::Simple 'no_plan';
iab utm use Test::More 'no_plan';
iab dbs $DB::single = 1;<ESC>
iab dtf use Data::Dumper;<CR>open(my $fh, '>', '/tmp/testing.txt');<CR>print $fh Dumper "dump to file\n";<CR>close $fh;

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" VIM-JAVASCRIPT
" Configuration of vim-javascript
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:javascript_plugin_jsdoc = 1
let g:javascript_plugin_flow = 1
set foldmethod=syntax

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" READ BUFFER
" open the file where we last edited it
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
autocmd BufReadPost *
    \ if line("'\"") > 0 && line ("'\"") <= line("$") |
    \   exe "normal g'\"" |
    \ endif

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" SICK OF TYPING SUBSTITUTE COMMAND
" Type shift + S for shortcut, shift + M for last match
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nmap S :%s///g<LEFT><LEFT><LEFT>
vmap S :Blockwise s///g<LEFT><LEFT><LEFT>

nmap <expr> M ':%s/' . @/ . '//g<LEFT><LEFT>'
vmap <expr> M ':s/' . @/ . '//g<LEFT><LEFT>'

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" SICK OF TYPING SET PASTE
" Type shift + P for shortcut
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nmap P :set paste<CR>
vmap P :set paste<CR>
" Turn it off
nmap !P :set nopaste<CR>
vmap !P :set nopaste<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" SICK OF TYPING SET NUMBER
" Type shift + N for shortcut
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nmap O :set number<CR>
vmap O :set number<CR>
" Turn it off
nmap !O :set nonumber<CR>
vmap !O :set nonumber<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" SICK OF TYPING CASE INSENSITIVE
" Type shift + C for shortcut
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nmap C :set ic<CR>
vmap C :set ic<CR>
" Turn it off
nmap !C :set noic<CR>
vmap !C :set noic<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" COMMAND-T ENABLING THE ESC KEY TO EXIT
" This function allows you to use ESC or C-c to exit COMMAND-T tool
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if &term =~ "xterm" || &term =~ "screen"
    let g:CommandTCancelMap = ['<ESC>', '<C-c>']
endif
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" COMMENT VISIBILITY
" Ensure comments are visible
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
highlight Comment term=bold ctermfg=white

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ENABLE CLICK AROUND
" Ensure that we can still copy and paste whilst in clickable mode
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"set mouse=nv

let &t_SI .= "\<Esc>[?2004h"
let &t_EI .= "\<Esc>[?2004l"

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ENABLE PASTE WITHOUT INDENTING
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

inoremap <special> <expr> <Esc>[200~ XTermPasteBegin()

function! XTermPasteBegin()
   set pastetoggle=<Esc>[201~
   set paste
return ""
endfunction

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" VIM GUTTER SETTTINGS
" View changes and modifications to your git repo
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set updatetime=100
highlight GitGutterAdd    guifg=#009900 ctermfg=2
highlight GitGutterChange guifg=#bbbb00 ctermfg=3
highlight GitGutterDelete guifg=#ff2222 ctermfg=1
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Pretty print JSON
" Type shift + J for formatting JSON data
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nmap J :%!python -m json.tool<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ENABLE PERL RELATED SHORTCUTS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
map <F11> :!perl -cW %<CR>
map <F10> :%!perltidy<CR>
map <+> :resize +10<CR>
